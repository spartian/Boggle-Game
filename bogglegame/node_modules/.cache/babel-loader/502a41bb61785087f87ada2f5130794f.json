{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\nimport CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.initGrid = shuffledGrid(); // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {}\n    };\n  } // 1. click on the tile\n  // 2. update tile selected to true.\n  // 2.1 Can select and unselect the tile\n  // 2.2 Can only unselect the last tile\n  // 2.3 Update currentWord as we select and unselect\n  // 2.4. Can only select the surrounding cells\n  // 2.5 Make a copy of board, word, currentWordPositions, etc\n  // 2.6 Mutate the state\n  // 3. render the board with updated tile so it renders as active\n  // handleClick(rowId, columnId) {\n  //   // TODO: Handle tile click to select / unselect tile.\n  //   const selectedTile = this.state.board[rowId][columnId];\n  //   const lastSelectedTile = this.state.currentWordPosition[\n  //     this.state.currentWordPosition.length - 1\n  //   ];\n  //   if (selectedTile.selected) {\n  //     // Check if selectedTile is last tile\n  //     if (isTileEqual(selectedTile, lastSelectedTile)) {\n  //       // Unselected selectedTile and remove from currentWordPosition\n  //       // Also update the board to set the tile to unselected\n  //       const newBoard = copyBoard(this.state.board);\n  //       newBoard[rowId][columnId].selected = false;\n  //       this.setState({\n  //         currentWord: this.state.currentWord.slice(0, -1),\n  //         board: newBoard,\n  //         currentWordPosition: this.state.currentWordPosition.slice(0, -1)\n  //       });\n  //     }\n  //   } else {\n  //     if (!lastSelectedTile || isAdjacent(selectedTile, lastSelectedTile)) {\n  //       // Select the tile\n  //       const newBoard = copyBoard(this.state.board);\n  //       newBoard[rowId][columnId].selected = true;\n  //       this.setState({\n  //         // update current word with selected tile\n  //         currentWord: this.state.currentWord.concat(\n  //           newBoard[rowId][columnId].letter\n  //         ),\n  //         // update board\n  //         board: newBoard,\n  //         // update current word position with selected tile position\n  //         currentWordPosition: this.state.currentWordPosition.concat({\n  //           rowId: rowId,\n  //           columnId: columnId\n  //         })\n  //       });\n  //     }\n  //   }\n  // }\n  // Adds Current Word to the Word List\n\n\n  handleSubmit(word) {\n    // TODO: Check if Current Word is valid\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid; // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Board // TODO: Pass Board Props\n    , {\n      board: this.state.board // handleClick={this.handleClick.bind(this)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(CurrentWord // TODO: Pass CurrentWord props\n    , {\n      currentWord: this.state.currentWord,\n      label: \"Current Word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","shuffledGrid","calculateScore","Board","ScoreBox","CurrentWord","Button","Game","constructor","props","initGrid","state","board","currentWord","currentWordPosition","wordScoreList","handleSubmit","word","length","score","clearedBoard","setState","render","bind","Object","values","reduce","totalScore","next"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\nimport CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {}\n    };\n  }\n\n  // 1. click on the tile\n  // 2. update tile selected to true.\n  // 2.1 Can select and unselect the tile\n  // 2.2 Can only unselect the last tile\n  // 2.3 Update currentWord as we select and unselect\n  // 2.4. Can only select the surrounding cells\n  // 2.5 Make a copy of board, word, currentWordPositions, etc\n  // 2.6 Mutate the state\n  // 3. render the board with updated tile so it renders as active\n  // handleClick(rowId, columnId) {\n  //   // TODO: Handle tile click to select / unselect tile.\n  //   const selectedTile = this.state.board[rowId][columnId];\n  //   const lastSelectedTile = this.state.currentWordPosition[\n  //     this.state.currentWordPosition.length - 1\n  //   ];\n  //   if (selectedTile.selected) {\n  //     // Check if selectedTile is last tile\n  //     if (isTileEqual(selectedTile, lastSelectedTile)) {\n  //       // Unselected selectedTile and remove from currentWordPosition\n  //       // Also update the board to set the tile to unselected\n  //       const newBoard = copyBoard(this.state.board);\n  //       newBoard[rowId][columnId].selected = false;\n  //       this.setState({\n  //         currentWord: this.state.currentWord.slice(0, -1),\n  //         board: newBoard,\n  //         currentWordPosition: this.state.currentWordPosition.slice(0, -1)\n  //       });\n  //     }\n  //   } else {\n  //     if (!lastSelectedTile || isAdjacent(selectedTile, lastSelectedTile)) {\n  //       // Select the tile\n  //       const newBoard = copyBoard(this.state.board);\n  //       newBoard[rowId][columnId].selected = true;\n  //       this.setState({\n  //         // update current word with selected tile\n  //         currentWord: this.state.currentWord.concat(\n  //           newBoard[rowId][columnId].letter\n  //         ),\n  //         // update board\n  //         board: newBoard,\n  //         // update current word position with selected tile position\n  //         currentWordPosition: this.state.currentWordPosition.concat({\n  //           rowId: rowId,\n  //           columnId: columnId\n  //         })\n  //       });\n  //     }\n  //   }\n  // }\n\n  // Adds Current Word to the Word List\n  handleSubmit(word) {\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            // TODO: Pass Board Props\n            board={this.state.board}\n            // handleClick={this.handleClick.bind(this)}\n          />\n          <CurrentWord\n            // TODO: Pass CurrentWord props\n            currentWord={this.state.currentWord}\n            label=\"Current Word\"\n          />\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}