{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox'; // import CurrentWord from '../CurrentWord';\n\nimport Button from '../Button';\nimport './Game.css'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.handleChange = e => {// this.setState({currentWord:e.target.value});\n    };\n\n    this.handleKeyPress = e => {\n      if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode >= 97 && e.keyCode <= 122) {\n        if (testForLettersInBoard(e, this.state.removableBoardArray) === true) {\n          // this.setstate({letter:i});\n          let letter = e.key;\n          this.setState({\n            currentLetter: letter\n          });\n          this.setState({\n            currentWord: this.state.currentWord + letter\n          });\n        }\n      } else if (e.keyCode === 8) {\n        this.setState({\n          currentWord: this.state.currentWord.substring(0, this.state.currentWord.length - 1)\n        });\n      } else {\n        alert(\"only alphabetic characters are allowed\");\n      }\n    };\n\n    this.initGrid = shuffledGrid(); // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter: '',\n      removableBoardArray: this.initGrid\n    };\n  } // Adds Current Word to the Word List\n\n\n  handleSubmit(word) {\n    // TODO: Check if Current Word is valid\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid;\n    const boardArray = this.initGrid; // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      removableBoardArray: boardArray\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"word-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Current Word\"), React.createElement(\"div\", {\n      className: \"current-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.handleKeyPress,\n      value: this.state.currentWord,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction testForLettersInBoard(e, boardState) {\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      if (e.key === boardState[i][j].letter) {\n        return new Object(i, j);\n      }\n    }\n  }\n\n  return new Object(-1, -1);\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","shuffledGrid","calculateScore","Board","ScoreBox","Button","Game","constructor","props","handleChange","e","handleKeyPress","keyCode","testForLettersInBoard","state","removableBoardArray","letter","key","setState","currentLetter","currentWord","substring","length","alert","initGrid","board","currentWordPosition","wordScoreList","handleSubmit","word","score","clearedBoard","boardArray","render","bind","Object","values","reduce","totalScore","next","boardState","i","j"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\n// import CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter:'',\n      removableBoardArray:this.initGrid\n    };\n  }\n\n\n\n\n\n\n  // Adds Current Word to the Word List\n  handleSubmit(word) {\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    const boardArray = this.initGrid;\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      removableBoardArray: boardArray\n    });\n  \n  }\n\n  handleChange = (e) =>\n  {\n    // this.setState({currentWord:e.target.value});\n  }\n\n  \n\n  handleKeyPress = (e) =>\n  {\n    if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122))\n    {\n      \n      if (testForLettersInBoard(e,this.state.removableBoardArray) === true)\n        { \n          // this.setstate({letter:i});\n          let letter = e.key;\n          this.setState({currentLetter:letter});\n          this.setState({currentWord:this.state.currentWord + letter});\n        }\n      }\n    else if (e.keyCode === 8)\n    {\n      this.setState({currentWord:this.state.currentWord.substring(0, this.state.currentWord.length - 1)});\n    }\n    else\n    {\n      alert(\"only alphabetic characters are allowed\");\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            board={this.state.board}\n          />\n\n          {/* <CurrentWord currentWord={this.state.currentWord}  label=\"Current Word\"> */} \n          {/* {/* </CurrentWord> */}\n\n          <div className=\"word-area\">\n            <div className=\"current-header\">\n              Current Word\n            </div>\n           <div className=\"current-word\">\n           \n            <input type=\"text\" \n            onKeyDown = {this.handleKeyPress} value= {this.state.currentWord}\n            ></input>\n            </div>\n          </div>\n\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n\nfunction testForLettersInBoard(e,boardState)\n{\n  for(let i=0;i<boardState.length;i++)\n  {\n   for(let j=0; j<boardState[i].length;j++)\n   {\n     if(e.key === boardState[i][j].letter)\n     {\n      return new Object(i,j);\n     }\n   } \n  }\n  return new Object(-1,-1);\n} "]},"metadata":{},"sourceType":"module"}