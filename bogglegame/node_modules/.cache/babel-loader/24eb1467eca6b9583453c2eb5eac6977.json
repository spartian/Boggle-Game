{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Timer\\\\index.js\";\nimport React, { Component } from 'react';\nexport default class ClockInterface extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 60 * 0.1,\n      myInterval: undefined\n    }; //   this.handleLoad  = this.handleLoad(this);\n  }\n\n  componentDidMount() {\n    this.myInterval = setInterval(function () {\n      this.setState(state => ({\n        count: state.count - 1\n      }));\n    }, 1000); // window.addEventListener('load', this.handleLoad(this));\n  }\n\n  componentDidUpdate() {\n    if (this.state.count <= 0) {\n      clearInterval(this.handleLoad.myInterval);\n      console.log(\"Hello there\");\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('load', this.handleLoad(this));\n  }\n\n  getSeconds() {\n    return ('0' + this.state.count % 60).slice(-2);\n  }\n\n  getMinutes() {\n    return Math.floor(this.state.count / 60);\n  }\n\n  handleLoad() {\n    //   var _this = this;\n    if (this.state.myInterval) {\n      return;\n    } //   const myInterval = \"\";\n    //   const myInterval = setInterval(function() {\n    //     _this.setState(state => ({\n    //       count: state.count - 1\n    //     }))\n    //   }, 1000)\n\n\n    this.setState({\n      myInterval: this.myInterval\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      id: \"clockdigits\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.getMinutes(), \":\", this.getSeconds()));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Timer/index.js"],"names":["React","Component","ClockInterface","constructor","props","state","count","myInterval","undefined","componentDidMount","setInterval","setState","componentDidUpdate","clearInterval","handleLoad","console","log","componentWillUnmount","window","removeEventListener","getSeconds","slice","getMinutes","Math","floor","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEE,eAAe,MAAMC,cAAN,SAA6BD,SAA7B,CAAuC;AACpDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,KAAK,GADD;AAEXC,MAAAA,UAAU,EAAEC;AAFD,KAAb,CAFiB,CAMnB;AAEC;;AAEDC,EAAAA,iBAAiB,GAAG;AACpB,SAAKF,UAAL,GAAkBG,WAAW,CAAC,YAAW;AACrC,WAAKC,QAAL,CAAcN,KAAK,KAAK;AACtBC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AADC,OAAL,CAAnB;AAGD,KAJ0B,EAIxB,IAJwB,CAA7B,CADoB,CAMhB;AACH;;AAEDM,EAAAA,kBAAkB,GAAE;AAChB,QAAG,KAAKP,KAAL,CAAWC,KAAX,IAAoB,CAAvB,EAAyB;AACrBO,MAAAA,aAAa,CAAC,KAAKC,UAAL,CAAgBP,UAAjB,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH;AACJ;;AACDC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,MAAM,CAACC,mBAAP,CAA2B,MAA3B,EAAmC,KAAKL,UAAL,CAAgB,IAAhB,CAAnC;AACH;;AACDM,EAAAA,UAAU,GAAG;AACX,WAAO,CAAC,MAAM,KAAKf,KAAL,CAAWC,KAAX,GAAmB,EAA1B,EAA8Be,KAA9B,CAAoC,CAAC,CAArC,CAAP;AACD;;AACDC,EAAAA,UAAU,GAAG;AACX,WAAQC,IAAI,CAACC,KAAL,CAAW,KAAKnB,KAAL,CAAWC,KAAX,GAAmB,EAA9B,CAAR;AACD;;AAEDQ,EAAAA,UAAU,GAAI;AACd;AACE,QAAI,KAAKT,KAAL,CAAWE,UAAf,EACA;AACE;AACD,KALW,CAMd;AACE;AACF;AACA;AACA;AACA;;;AACE,SAAKI,QAAL,CAAc;AAACJ,MAAAA,UAAU,EAAC,KAAKA;AAAjB,KAAd;AACD;;AAEDkB,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,EAAE,EAAC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsB,KAAKH,UAAL,EAAtB,OAA0C,KAAKF,UAAL,EAA1C,CADF,CADF;AAKD;;AAzDmD","sourcesContent":["import React,{Component} from 'react';  \r\n\r\n  export default class ClockInterface extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        count: 60 * 0.1,\r\n        myInterval: undefined\r\n      }\r\n    //   this.handleLoad  = this.handleLoad(this);\r\n    \r\n    };\r\n    \r\n    componentDidMount() {\r\n    this.myInterval = setInterval(function() {\r\n        this.setState(state => ({\r\n          count: state.count - 1\r\n        }))\r\n      }, 1000)\r\n        // window.addEventListener('load', this.handleLoad(this));\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.count <= 0){\r\n            clearInterval(this.handleLoad.myInterval);\r\n            console.log(\"Hello there\");\r\n        }\r\n    }\r\n    componentWillUnmount() { \r\n        window.removeEventListener('load', this.handleLoad(this)) \r\n    }\r\n    getSeconds() {\r\n      return ('0' + this.state.count % 60).slice(-2)\r\n    };\r\n    getMinutes() {\r\n      return (Math.floor(this.state.count / 60) )\r\n    };\r\n  \r\n    handleLoad () {\r\n    //   var _this = this;\r\n      if (this.state.myInterval) \r\n      {\r\n        return\r\n      }\r\n    //   const myInterval = \"\";\r\n      //   const myInterval = setInterval(function() {\r\n    //     _this.setState(state => ({\r\n    //       count: state.count - 1\r\n    //     }))\r\n    //   }, 1000)\r\n      this.setState({myInterval:this.myInterval});\r\n    };\r\n    \r\n    render() {\r\n      return (\r\n        <div id='container'>\r\n          <h1 id='clockdigits'>{this.getMinutes()}:{this.getSeconds()}</h1>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  "]},"metadata":{},"sourceType":"module"}