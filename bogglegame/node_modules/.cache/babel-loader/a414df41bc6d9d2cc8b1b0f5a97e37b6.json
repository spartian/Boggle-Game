{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport jQuery from 'jquery';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox'; // import CurrentWord from '../CurrentWord';\n\nimport Button from '../Button';\nimport './Game.css';\nimport TileData from '../../data'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.handleChange = e => {// this.setState({currentWord:e.target.value});\n    };\n\n    this.handleKeyPress = e => {\n      if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode >= 97 && e.keyCode <= 122) {\n        let returnedRowAndColumn = testForLettersInBoard(e, this.state.removableBoardArray, this);\n\n        if (returnedRowAndColumn[0].length > 0) {\n          const newItems = this.state.removableBoardArray;\n          const previouslyEnteredCurrentLetter = e.key;\n          newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n          let previousDeletedRow = returnedRowAndColumn[0][0].row;\n          let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n          this.setState({\n            removableBoardArray: newItems\n          });\n          this.setState({\n            currentLetter: e.key\n          });\n          this.setState({\n            currentWord: this.state.currentWord + e.key\n          });\n          this.setState({\n            indexesPushedIntoArray: this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)\n          });\n          this.setState(prevState => ({\n            lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {\n              previousDeletedRow,\n              previousDeletedColumn\n            }]\n          }));\n          const face = previouslyEnteredCurrentLetter;\n          const row = previousDeletedRow;\n          const col = previousDeletedColumn;\n          const requiredTileObjectFormat = {\n            face,\n            row,\n            col\n          };\n          const requiredTileObject = new TileData(requiredTileObjectFormat);\n          this.setState(prevState => ({\n            previousLetters: [...prevState.previousLetters, requiredTileObject]\n          }));\n          console.log(\"2\");\n        } else {\n          alert(\"The letter either doesn't exist in board or you have already chosen maximum number of that letter in board\");\n        }\n      } else if (e.keyCode === 8) {\n        this.setState({\n          currentWord: this.state.currentWord.substring(0, this.state.currentWord.length - 1)\n        });\n        const originalBoard = this.state.removableBoardArray;\n        let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n        let lastLetter = this.state.previousLetters.pop();\n        originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n        this.setState({\n          removableBoardArray: originalBoard\n        });\n        this.state.indexesPushedIntoArray.pop();\n      } else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {\n        e.preventDefault();\n        alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      } else {\n        alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n      }\n    };\n\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = []; // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter: '',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray: [],\n      lastDeletedRowAndColumn: [],\n      previousLetters: []\n    };\n  } // Adds Current Word to the Word List\n\n\n  handleSubmit(word, indexesPushedIntoArray) {\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data: {\n        wordEntered: word,\n        indexesArray: JSON.stringify(indexesPushedIntoArray)\n      },\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).done(data => {\n      console.log(data);\n    }); // TODO: Check if Current Word is valid\n    // Check if word is valid\n\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid; // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: indexesPushedIntoArray // ,removableBoardArray:clearedRemovableBoardArray\n\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"word-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Current Word\"), React.createElement(\"div\", {\n      className: \"current-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.handleKeyPress,\n      value: this.state.currentWord,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }))), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord, this.state.indexesPushedIntoArray),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction testForLettersInBoard(e, boardState, _this) {\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      if (boardState[i][j] === \"\") {\n        if (_this.initGrid[i][j].letter === e.key) {\n          removedRowsAndColumns = removedRowsAndColumns.concat({\n            row: i,\n            column: j\n          });\n        }\n      }\n\n      if (e.key === boardState[i][j].letter) {\n        removedRowsAndColumns = removedRowsAndColumns.concat({\n          row: i,\n          column: j\n        }); // return {row:i,column:j};\n      }\n    }\n  }\n\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n  return removedRowsAndColumnsArray;\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","jQuery","shuffledGrid","calculateScore","Board","ScoreBox","Button","TileData","Game","constructor","props","handleChange","e","handleKeyPress","keyCode","returnedRowAndColumn","testForLettersInBoard","state","removableBoardArray","length","newItems","previouslyEnteredCurrentLetter","key","row","column","previousDeletedRow","previousDeletedColumn","setState","currentLetter","currentWord","indexesPushedIntoArray","concat","prevState","lastDeletedRowAndColumn","face","col","requiredTileObjectFormat","requiredTileObject","previousLetters","console","log","alert","substring","originalBoard","rowAndColumn","pop","lastLetter","preventDefault","initGrid","JSON","parse","stringify","removedRowsAndColumnsArray","board","currentWordPosition","wordScoreList","handleSubmit","word","ajax","type","url","data","wordEntered","indexesArray","crossDomain","headers","done","score","clearedBoard","render","bind","Object","values","reduce","totalScore","next","boardState","_this","removedRowsAndColumns","i","j","letter","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jQuery from 'jquery'\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\n// import CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\nimport  TileData  from '../../data';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = [];\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter:'',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray:[],\n      lastDeletedRowAndColumn:[],\n      previousLetters:[]\n    };\n  }\n\n\n\n\n\n\n  // Adds Current Word to the Word List\n  handleSubmit(word,indexesPushedIntoArray) \n  {\n\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data:{wordEntered:word, indexesArray:JSON.stringify(indexesPushedIntoArray)},\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n\n    }).done(data => {\n      console.log(data);\n    });\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: indexesPushedIntoArray\n      // ,removableBoardArray:clearedRemovableBoardArray\n    });\n  \n  }\n\n  handleChange = (e) =>\n  {\n    // this.setState({currentWord:e.target.value});\n  }\n\n  \n\n  handleKeyPress = (e) =>\n  {\n    if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122))\n    {\n    \n      let returnedRowAndColumn = testForLettersInBoard(e,this.state.removableBoardArray,this) ;\n      \n      if ( returnedRowAndColumn[0].length > 0 )\n        { \n            const newItems = this.state.removableBoardArray;\n            const previouslyEnteredCurrentLetter = e.key;\n            newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n            let previousDeletedRow = returnedRowAndColumn[0][0].row;\n            let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n            this.setState({removableBoardArray:newItems});\n            this.setState({currentLetter:e.key});\n            this.setState({currentWord:this.state.currentWord + e.key});\n            this.setState({indexesPushedIntoArray:this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)});\n            this.setState(prevState => ({\n              lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {previousDeletedRow,previousDeletedColumn}]\n            }));\n\n           \n            const face = previouslyEnteredCurrentLetter;\n            const row = previousDeletedRow;\n            const col = previousDeletedColumn;\n            const requiredTileObjectFormat = {face,row,col};\n            const requiredTileObject = new TileData(requiredTileObjectFormat);\n            this.setState(prevState => ({\n              previousLetters: [...prevState.previousLetters, requiredTileObject]\n            }));\n          console.log(\"2\");\n        }\n      else\n      {\n        alert(\"The letter either doesn't exist in board or you have already chosen maximum number of that letter in board\");\n      }\n      }\n    else if (e.keyCode === 8)\n    {\n      \n      this.setState({currentWord:this.state.currentWord.substring(0, this.state.currentWord.length - 1)});\n      const originalBoard = this.state.removableBoardArray;\n      let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n      let lastLetter = this.state.previousLetters.pop();\n      originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n      this.setState({removableBoardArray:originalBoard});\n      this.state.indexesPushedIntoArray.pop();\n    }\n    else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40)\n    {\n      e.preventDefault();\n      alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      \n    }\n    else\n    {\n      alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            board={this.state.board}\n          />\n\n          {/* <CurrentWord currentWord={this.state.currentWord}  label=\"Current Word\"> */} \n          {/* {/* </CurrentWord> */}\n\n          <div className=\"word-area\">\n            <div className=\"current-header\">\n              Current Word\n            </div>\n           <div className=\"current-word\">\n           \n            <input type=\"text\" \n            onKeyDown = {this.handleKeyPress} value= {this.state.currentWord} onChange={this.handleChange}\n            ></input>\n            </div>\n          </div>\n\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord,this.state.indexesPushedIntoArray)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n\nfunction testForLettersInBoard(e,boardState,_this)\n{\n\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n  for(let i=0;i<boardState.length;i++)\n  {\n   for(let j=0; j<boardState[i].length;j++)\n   {\n    if (boardState[i][j] === \"\")\n    {\n      if (_this.initGrid[i][j].letter === e.key)\n      {\n        removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j});\n      }\n    }\n\n     if(e.key === boardState[i][j].letter)\n     {  \n      removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j});\n      // return {row:i,column:j};\n     }\n   } \n  }\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n  return removedRowsAndColumnsArray;\n} "]},"metadata":{},"sourceType":"module"}