{"ast":null,"code":"import TileData from '../data';\nconst noOfCharinEachElementOfArray = 6;\nconst boardDimension = 4;\n\nfunction randomlySelectedElementOfSplicedElement(element) {\n  let randomIndex = Math.floor(Math.random() * facesNum);\n  return element.charAt(randomIndex);\n}\n\nfunction shuffleGrid(grid) {\n  let len = grid.length - 1;\n\n  for (let i = 0; i <= len; i++) {\n    const randomlySelectedIndex = Math.floor(Math.random() * (len + 1)); // random from 0 -> 16\n\n    [grid[i], grid[randomlySelectedIndex]] = [grid[randomlySelectedIndex], grid[i]];\n  }\n\n  return grid;\n}\n\nexport const shuffleBoard = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n  const grid = ['aeaneg', 'ahspco', 'aspffk', 'objoab', 'iotmuc', 'ryvdel', 'lreixd', 'eiunes', 'wngeeh', 'lnhnrz', 'tstiyd', 'owtoat', 'erttyl', 'toessi', 'terwhv', 'nuihmq'];\n  const board = [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']];\n  const shuffledGrid = shuffleGrid(grid);\n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      // let grid = shuffledGrid.shift();\n      let splicedElement = shuffledGrid.splice(0, 1);\n      let grid = splicedElement[0];\n      let face = randomlySelectedElementOfSplicedElement(grid);\n      let tileDataObj = {\n        face,\n        row,\n        col\n      };\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n\n  return board;\n};\nexport const copyBoard = board => {\n  const copiedBoard = board.map(row => {\n    return row.map(tile => {\n      return tile.clone();\n    });\n  });\n  return copiedBoard;\n};\nexport const isTileEqual = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n};\nexport const isAdjacent = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n\n  if (isTileEqual(tile1, tile2)) {\n    return false;\n  }\n\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n\n  if (score > 6) {\n    return 6;\n  }\n\n  return score;\n};","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/util/gameUtil.js"],"names":["TileData","noOfCharinEachElementOfArray","boardDimension","randomlySelectedElementOfSplicedElement","element","randomIndex","Math","floor","random","facesNum","charAt","shuffleGrid","grid","len","length","i","randomlySelectedIndex","shuffleBoard","board","shuffledGrid","row","col","splicedElement","splice","face","tileDataObj","tileData","copyBoard","copiedBoard","map","tile","clone","isTileEqual","tile1","tile2","rowId","columnId","isAdjacent","colDiff","abs","rowDiff","calculateScore","word","score"],"mappings":"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","sourcesContent":["import  TileData  from '../data';\n\nconst noOfCharinEachElementOfArray = 6;\nconst boardDimension = 4;\nfunction randomlySelectedElementOfSplicedElement (element) \n{\n  let randomIndex = Math.floor(Math.random() * facesNum);\n  return element.charAt(randomIndex);\n}\n\nfunction shuffleGrid (grid) \n{\n  let len = grid.length - 1;\n  for (let i = 0; i <= len; i++) {\n    const randomlySelectedIndex = Math.floor(Math.random() * (len+1)); // random from 0 -> 16\n    [grid[i], grid[randomlySelectedIndex]] = [grid[randomlySelectedIndex], grid[i]];\n  }\n  return grid;\n}\n\nexport const shuffleBoard = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n\n  const grid = [\n    'aeaneg',\n    'ahspco',\n    'aspffk',\n    'objoab',\n    'iotmuc',\n    'ryvdel',\n    'lreixd',\n    'eiunes',\n    'wngeeh',\n    'lnhnrz',\n    'tstiyd',\n    'owtoat',\n    'erttyl',\n    'toessi',\n    'terwhv',\n    'nuihmq'\n  ];\n\n  const board = [\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', '']\n  ];\n\n  const shuffledGrid = shuffleGrid(grid);\n  \n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      // let grid = shuffledGrid.shift();\n      let splicedElement = shuffledGrid.splice(0,1);\n      let grid = splicedElement[0];\n      let face = randomlySelectedElementOfSplicedElement(grid);\n      let tileDataObj = {face,row,col}\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n  return board;\n};\n\nexport const copyBoard = board => {\n  const copiedBoard = board.map(row => {\n    return row.map(tile => {\n      return tile.clone();\n    });\n  });\n  return copiedBoard;\n};\n\nexport const isTileEqual = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n};\n\nexport const isAdjacent = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  if (isTileEqual(tile1, tile2)) {\n    return false;\n  }\n\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n  if (score > 6) {\n    return 6;\n  }\n  return score;\n};\n"]},"metadata":{},"sourceType":"module"}