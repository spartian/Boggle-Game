{"ast":null,"code":"import TileData from '../data';\nconst noOfCharinEachElementOfArray = 6;\nconst boardDimension = 4;\n\nfunction createTwoDimensionalBoard(rowsAndColumns) {\n  const tempBoard = new Array(rowsAndColumns).fill('').map(() => new Array(rowsAndColumns).fill(''));\n  return tempBoard;\n}\n\nfunction randomlySelectedElementOfSplicedElement(element) {\n  let randomIndex = element.split('')[Math.floor(Math.random() * noOfCharinEachElementOfArray)];\n  return randomIndex;\n}\n\nfunction shuffleGrid(grid) {\n  let len = grid.length - 1;\n\n  for (let i = 0; i <= len; i++) {\n    const randomlySelectedIndex = Math.floor(Math.random() * (len + 1)); // random from 0 -> 16\n\n    [grid[i], grid[randomlySelectedIndex]] = [grid[randomlySelectedIndex], grid[i]];\n  }\n\n  return grid;\n}\n\nexport const shuffledGrid = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n  const grid = ['aeaneg', 'ahspco', 'aspffk', 'objoab', 'iotmuc', 'ryvdel', 'lreixd', 'eiunes', 'wngeeh', 'lnhnrz', 'tstiyd', 'owtoat', 'erttyl', 'toessi', 'terwhv', 'nuihmq'];\n  const board = createTwoDimensionalBoard(boardDimension);\n  const shuffleElementsOfGrid = shuffleGrid(grid);\n  const totalFacesOrCharacters = [];\n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      //Here shuffledGrid.shift can also be used\n      let splicedElement = shuffleElementsOfGrid.splice(0, 1);\n      let grid = splicedElement[0];\n      let face = randomlySelectedElementOfSplicedElement(grid);\n      totalFacesOrCharacters.push(face);\n      let tileDataObj = {\n        face,\n        row,\n        col\n      };\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n\n  getCountOfNumberOfCharacters(totalFacesOrCharacters);\n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      //Here shuffledGrid.shift can also be used\n      let face = \"\";\n\n      if (row == 0 && col == 0) {\n        face = 'n';\n      }\n\n      if (row == 0 && col == 1) {\n        face = 'h';\n      }\n\n      if (row == 0 && col == 2) {\n        face = 'n';\n      }\n\n      if (row == 0 && col == 3) {\n        face = 'b';\n      }\n\n      if (row == 1 && col == 0) {\n        face = 'y';\n      }\n\n      if (row == 1 && col == 1) {\n        face = 'e';\n      }\n\n      if (row == 1 && col == 2) {\n        face = 'e';\n      }\n\n      if (row == 1 && col == 3) {\n        face = 'o';\n      }\n\n      if (row == 2 && col == 0) {\n        face = 'i';\n      }\n\n      if (row == 2 && col == 1) {\n        face = 'f';\n      }\n\n      if (row == 2 && col == 2) {\n        face = 'w';\n      }\n\n      if (row == 2 && col == 3) {\n        face = 't';\n      }\n\n      if (row == 3 && col == 0) {\n        face = 'm';\n      }\n\n      if (row == 3 && col == 1) {\n        face = 'q';\n      }\n\n      if (row == 3 && col == 2) {\n        face = 'y';\n      }\n\n      if (row == 3 && col == 3) {\n        face = 'h';\n      }\n\n      let tileDataObj = {\n        face,\n        row,\n        col\n      };\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n\n  return board;\n};\n\nfunction getCountOfNumberOfCharacters(totalFacesOrCharacters) {\n  for (let i = 0; i < totalFacesOrCharacters.length; i++) {\n    totalFacesOrCharacters = totalFacesOrCharacters.findIndex(totalFacesOrCharacters[i]);\n  }\n} // export const copyBoard = board => {\n//   const copiedBoard = board.map(row => {\n//     return row.map(tile => {\n//       return tile.clone();\n//     });\n//   });\n//   return copiedBoard;\n// };\n// export const isTileEqual = (tile1, tile2) => {\n//   if (!tile1 || !tile2) return false;\n//   return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n// };\n\n\nexport const isAdjacent = (tile1, tile2) => {\n  // if (!tile1 || !tile2) return false;\n  // if (isTileEqual(tile1, tile2)) {\n  //   return false;\n  // }\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n\n  if (score > 6) {\n    return 6;\n  }\n\n  return score;\n};","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/util/gameUtil.js"],"names":["TileData","noOfCharinEachElementOfArray","boardDimension","createTwoDimensionalBoard","rowsAndColumns","tempBoard","Array","fill","map","randomlySelectedElementOfSplicedElement","element","randomIndex","split","Math","floor","random","shuffleGrid","grid","len","length","i","randomlySelectedIndex","shuffledGrid","board","shuffleElementsOfGrid","totalFacesOrCharacters","row","col","splicedElement","splice","face","push","tileDataObj","tileData","getCountOfNumberOfCharacters","findIndex","isAdjacent","tile1","tile2","colDiff","abs","columnId","rowDiff","rowId","calculateScore","word","score"],"mappings":"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","sourcesContent":["import  TileData  from '../data';\n\nconst noOfCharinEachElementOfArray = 6;\nconst boardDimension = 4;\n\nfunction createTwoDimensionalBoard(rowsAndColumns)\n{\nconst tempBoard = new Array(rowsAndColumns).fill('').map(() => new Array(rowsAndColumns).fill(''));\nreturn tempBoard;\n}\n\n\nfunction randomlySelectedElementOfSplicedElement (element) \n{\n  let randomIndex = element.split('')[Math.floor(Math.random() * noOfCharinEachElementOfArray)];\n  return randomIndex;\n}\n\nfunction shuffleGrid (grid) \n{\n  let len = grid.length - 1;\n  for (let i = 0; i <= len; i++) {\n    const randomlySelectedIndex = Math.floor(Math.random() * (len+1)); // random from 0 -> 16\n    [grid[i], grid[randomlySelectedIndex]] = [grid[randomlySelectedIndex], grid[i]];\n  }\n  return grid;\n}\n\nexport const shuffledGrid = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n\n  const grid = [\n    'aeaneg',\n    'ahspco',\n    'aspffk',\n    'objoab',\n    'iotmuc',\n    'ryvdel',\n    'lreixd',\n    'eiunes',\n    'wngeeh',\n    'lnhnrz',\n    'tstiyd',\n    'owtoat',\n    'erttyl',\n    'toessi',\n    'terwhv',\n    'nuihmq'\n  ];\n\n\n  const board = createTwoDimensionalBoard(boardDimension);\n\n  const shuffleElementsOfGrid = shuffleGrid(grid);\n  \n  const totalFacesOrCharacters = [];\n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      //Here shuffledGrid.shift can also be used\n      let splicedElement = shuffleElementsOfGrid.splice(0,1);\n      let grid = splicedElement[0];\n      let face = randomlySelectedElementOfSplicedElement(grid);\n      totalFacesOrCharacters.push(face);\n      let tileDataObj = {face,row,col}\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n  \n  getCountOfNumberOfCharacters(totalFacesOrCharacters);\n\n  for (let row = 0; row < boardDimension; row++) {\n    for (let col = 0; col < boardDimension; col++) {\n      //Here shuffledGrid.shift can also be used\n      let face = \"\"\n      if (row == 0 && col == 0)\n      {\n        face = 'n'\n      }\n      if (row == 0 && col == 1)\n      {\n        face = 'h'\n      }\n      if (row == 0 && col == 2)\n      {\n        face = 'n'\n      }\n      if (row == 0 && col == 3)\n      {\n        face = 'b'\n      }\n      if (row == 1 && col == 0)\n      {\n        face = 'y'\n      }\n      if (row == 1 && col == 1)\n      {\n        face = 'e'\n      }\n      if (row == 1 && col == 2)\n      {\n        face = 'e'\n      }\n      if (row == 1 && col == 3)\n      {\n        face = 'o'\n      }\n      if (row == 2 && col == 0)\n      {\n        face = 'i'\n      }\n      if (row == 2 && col == 1)\n      {\n        face = 'f'\n      }\n      if (row == 2 && col == 2)\n      {\n        face = 'w'\n      }\n      if (row == 2 && col == 3)\n      {\n        face = 't'\n      }\n      if (row == 3 && col == 0)\n      {\n        face = 'm'\n      }\n      if (row == 3 && col == 1)\n      {\n        face = 'q'\n      }\n      if (row == 3 && col == 2)\n      {\n        face = 'y'\n      }\n      if (row == 3 && col == 3)\n      {\n        face = 'h'\n      }\n\n      let tileDataObj = {face,row,col}\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n  \n  return board;\n};\n\nfunction getCountOfNumberOfCharacters (totalFacesOrCharacters)\n{\n  for (let i = 0; i < totalFacesOrCharacters.length ;i ++)\n  {\n     totalFacesOrCharacters = totalFacesOrCharacters.findIndex(totalFacesOrCharacters[i]);\n  }\n  \n}\n// export const copyBoard = board => {\n//   const copiedBoard = board.map(row => {\n//     return row.map(tile => {\n//       return tile.clone();\n//     });\n//   });\n//   return copiedBoard;\n// };\n\n// export const isTileEqual = (tile1, tile2) => {\n//   if (!tile1 || !tile2) return false;\n//   return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n// };\n\nexport const isAdjacent = (tile1, tile2) => {\n  // if (!tile1 || !tile2) return false;\n  // if (isTileEqual(tile1, tile2)) {\n  //   return false;\n  // }\n\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n  if (score > 6) {\n    return 6;\n  }\n  return score;\n};\n"]},"metadata":{},"sourceType":"module"}