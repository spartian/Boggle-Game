{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport jQuery from 'jquery';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox'; // import CurrentWord from '../CurrentWord';\n\nimport Button from '../Button';\nimport './Game.css'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.handleChange = e => {// this.setState({currentWord:e.target.value});\n    };\n\n    this.handleKeyPress = e => {\n      if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode >= 97 && e.keyCode <= 122) {\n        let returnedRowAndColumn = testForLettersInBoard(e, this.state.removableBoardArray);\n\n        if (returnedRowAndColumn.row !== -1 && returnedRowAndColumn.column !== -1) {\n          const newItems = this.state.removableBoardArray;\n          newItems[returnedRowAndColumn.row][returnedRowAndColumn.column] = \"\";\n          this.setState({\n            removableBoardArray: newItems\n          });\n          this.setState({\n            currentLetter: e.key\n          });\n          this.setState({\n            currentWord: this.state.currentWord + e.key\n          });\n        } else {\n          alert(\"The letter either doesn't exist in board or you have already chosen maximum number of that letter in board\");\n        }\n      } else if (e.keyCode === 8) {\n        this.setState({\n          currentWord: this.state.currentWord.substring(0, this.state.currentWord.length - 1)\n        });\n      } else {\n        alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n      }\n    };\n\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumns = {}; // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter: '',\n      removableBoardArray: this.removableBoardArray,\n      removedRowsAndColumnsArray: []\n    };\n  } // Adds Current Word to the Word List\n\n\n  handleSubmit(word) {\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data: {\n        wordEntered: word\n      },\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).done(data => {\n      console.log(data);\n    }); // TODO: Check if Current Word is valid\n    // Check if word is valid\n\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid; // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard // ,removableBoardArray:clearedRemovableBoardArray\n\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"word-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Current Word\"), React.createElement(\"div\", {\n      className: \"current-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.handleKeyPress,\n      value: this.state.currentWord,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction testForLettersInBoard(e, boardState) {\n  let removedRowsAndColumns = {};\n\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      if (e.key === boardState[i][j].letter) {\n        removedRowsAndColumns += {\n          row: i,\n          column: j\n        }; // return {row:i,column:j};\n      }\n    }\n  }\n\n  this.removedRowsAndColumnsArray.push(this.removedRowsAndColumns);\n  return this.removedRowsAndColumnsArray;\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","jQuery","shuffledGrid","calculateScore","Board","ScoreBox","Button","Game","constructor","props","handleChange","e","handleKeyPress","keyCode","returnedRowAndColumn","testForLettersInBoard","state","removableBoardArray","row","column","newItems","setState","currentLetter","key","currentWord","alert","substring","length","initGrid","JSON","parse","stringify","removedRowsAndColumns","board","currentWordPosition","wordScoreList","removedRowsAndColumnsArray","handleSubmit","word","ajax","type","url","data","wordEntered","crossDomain","headers","done","console","log","score","clearedBoard","render","bind","Object","values","reduce","totalScore","next","boardState","i","j","letter","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jQuery from 'jquery'\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\n// import CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumns = {};\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter:'',\n      removableBoardArray: this.removableBoardArray,\n      removedRowsAndColumnsArray : []\n    };\n  }\n\n\n\n\n\n\n  // Adds Current Word to the Word List\n  handleSubmit(word) \n  {\n\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data:{wordEntered:word},\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n\n    }).done(data => {\n      console.log(data);\n    });\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard\n      // ,removableBoardArray:clearedRemovableBoardArray\n    });\n  \n  }\n\n  handleChange = (e) =>\n  {\n    // this.setState({currentWord:e.target.value});\n  }\n\n  \n\n  handleKeyPress = (e) =>\n  {\n    if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122))\n    {\n      \n      let returnedRowAndColumn = testForLettersInBoard(e,this.state.removableBoardArray) ;\n      \n      if ( returnedRowAndColumn.row !== -1 && returnedRowAndColumn.column !== -1 )\n        { \n            const newItems = this.state.removableBoardArray;\n            newItems[returnedRowAndColumn.row][returnedRowAndColumn.column] = \"\";\n           \n            this.setState({removableBoardArray:newItems});\n            this.setState({currentLetter:e.key});\n            this.setState({currentWord:this.state.currentWord + e.key});\n          \n        }\n      else\n      {\n        alert(\"The letter either doesn't exist in board or you have already chosen maximum number of that letter in board\");\n      }\n      }\n    else if (e.keyCode === 8)\n    {\n      this.setState({currentWord:this.state.currentWord.substring(0, this.state.currentWord.length - 1)});\n    }\n    else\n    {\n      alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            board={this.state.board}\n          />\n\n          {/* <CurrentWord currentWord={this.state.currentWord}  label=\"Current Word\"> */} \n          {/* {/* </CurrentWord> */}\n\n          <div className=\"word-area\">\n            <div className=\"current-header\">\n              Current Word\n            </div>\n           <div className=\"current-word\">\n           \n            <input type=\"text\" \n            onKeyDown = {this.handleKeyPress} value= {this.state.currentWord} onChange={this.handleChange}\n            ></input>\n            </div>\n          </div>\n\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n\nfunction testForLettersInBoard(e,boardState)\n{\n\n  let removedRowsAndColumns = {};\n  for(let i=0;i<boardState.length;i++)\n  {\n   for(let j=0; j<boardState[i].length;j++)\n   {\n     if(e.key === boardState[i][j].letter)\n     {  \n      removedRowsAndColumns += {row:i,column:j};\n      // return {row:i,column:j};\n     }\n   } \n  }\n  this.removedRowsAndColumnsArray.push(this.removedRowsAndColumns);\n  return this.removedRowsAndColumnsArray;\n} "]},"metadata":{},"sourceType":"module"}