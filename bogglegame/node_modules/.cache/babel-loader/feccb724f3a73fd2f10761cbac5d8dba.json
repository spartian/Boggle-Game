{"ast":null,"code":"import TileData from '../data';\nconst facesNum = 6;\nconst boardLength = 4;\n\nconst randomlySelectedFace = faces => {\n  let randomIndex = Math.floor(Math.random() * facesNum);\n  return faces.charAt(randomIndex);\n};\n\nfunction shuffleDice(dice) {\n  var originalDice = dice;\n  dice.sort(() => 0.5 - Math.random());\n  return dice;\n}\n\nexport const shuffleBoard = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n  const dice = ['aeaneg', 'ahspco', 'aspffk', 'objoab', 'iotmuc', 'ryvdel', 'lreixd', 'eiunes', 'wngeeh', 'lnhnrz', 'tstiyd', 'owtoat', 'erttyl', 'toessi', 'terwhv', 'nuihmq'];\n  const board = [['', '', '', ''], ['', '', '', ''], ['', '', '', ''], ['', '', '', '']];\n  const shuffledDice = shuffleDice(dice);\n\n  for (let row = 0; row < boardLength; row++) {\n    for (let col = 0; col < boardLength; col++) {\n      let dice = shuffledDice.shift();\n      let face = randomlySelectedFace(dice);\n      let tileDataObj = {\n        face,\n        row,\n        col\n      };\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n\n  return board;\n};\nexport const copyBoard = board => {\n  const copiedBoard = board.map(row => {\n    return row.map(tile => {\n      return tile.clone();\n    });\n  });\n  return copiedBoard;\n};\nexport const isTileEqual = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n};\nexport const isAdjacent = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n\n  if (isTileEqual(tile1, tile2)) {\n    return false;\n  }\n\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n\n  if (score > 6) {\n    return 6;\n  }\n\n  return score;\n};","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/util/gameUtil.js"],"names":["TileData","facesNum","boardLength","randomlySelectedFace","faces","randomIndex","Math","floor","random","charAt","shuffleDice","dice","originalDice","sort","shuffleBoard","board","shuffledDice","row","col","shift","face","tileDataObj","tileData","copyBoard","copiedBoard","map","tile","clone","isTileEqual","tile1","tile2","rowId","columnId","isAdjacent","colDiff","abs","rowDiff","calculateScore","word","score","length"],"mappings":"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","sourcesContent":["import  TileData  from '../data';\n\nconst facesNum = 6;\nconst boardLength = 4;\nconst randomlySelectedFace = faces => {\n  let randomIndex = Math.floor(Math.random() * facesNum);\n  return faces.charAt(randomIndex);\n};\n\nfunction shuffleDice (dice) \n{\n  var originalDice = dice;\n  dice.sort(() => 0.5 - Math.random());\n  return dice;\n}\n\nexport const shuffleBoard = () => {\n  //  Create 1D array with dice\n  //  Shuffle the dice\n  //  Create 2D array with an empty board\n  //  Randomly select from the 1D array\n  //  Insert in the board and randomly pick a face\n\n  const dice = [\n    'aeaneg',\n    'ahspco',\n    'aspffk',\n    'objoab',\n    'iotmuc',\n    'ryvdel',\n    'lreixd',\n    'eiunes',\n    'wngeeh',\n    'lnhnrz',\n    'tstiyd',\n    'owtoat',\n    'erttyl',\n    'toessi',\n    'terwhv',\n    'nuihmq'\n  ];\n\n  const board = [\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', ''],\n    ['', '', '', '']\n  ];\n\n  const shuffledDice = shuffleDice(dice);\n  \n\n  for (let row = 0; row < boardLength; row++) {\n    for (let col = 0; col < boardLength; col++) {\n      let dice = shuffledDice.shift();\n\n      let face = randomlySelectedFace(dice);\n      let tileDataObj = {face,row,col}\n      const tileData = new TileData(tileDataObj);\n      board[row][col] = tileData;\n    }\n  }\n  return board;\n};\n\nexport const copyBoard = board => {\n  const copiedBoard = board.map(row => {\n    return row.map(tile => {\n      return tile.clone();\n    });\n  });\n  return copiedBoard;\n};\n\nexport const isTileEqual = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  return tile1.rowId === tile2.rowId && tile1.columnId === tile2.columnId;\n};\n\nexport const isAdjacent = (tile1, tile2) => {\n  if (!tile1 || !tile2) return false;\n  if (isTileEqual(tile1, tile2)) {\n    return false;\n  }\n\n  const colDiff = Math.abs(tile1.columnId - tile2.columnId);\n  const rowDiff = Math.abs(tile1.rowId - tile2.rowId);\n  if (colDiff <= 1 && rowDiff <= 1) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport const calculateScore = word => {\n  const score = word.length - 2;\n\n  if (score < 1) {\n    return 1;\n  }\n  if (score > 6) {\n    return 6;\n  }\n  return score;\n};\n"]},"metadata":{},"sourceType":"module"}