{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport jQuery from 'jquery';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox'; // import CurrentWord from '../CurrentWord';\n\nimport Button from '../Button';\nimport './Game.css';\nimport TileData from '../../data'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.handleChange = e => {// this.setState({currentWord:e.target.value});\n    };\n\n    this.handleKeyPress = e => {\n      if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode >= 97 && e.keyCode <= 122) {\n        let letterInstance = false;\n        let requiredFlag = false;\n        let returnedRowAndColumn = testForLettersInBoard(e, this.state.removableBoardArray, this);\n\n        if (returnedRowAndColumn[0].length > 0) {\n          const desiredFlag = returnedRowAndColumn.forEach(function (element1) {\n            element1.forEach(function (element2) {\n              if (element2 == letterInstance) {\n                requiredFlag = true;\n              }\n            });\n          });\n\n          if (requiredFlag === true) {\n            const newItems = this.state.removableBoardArray;\n            const previouslyEnteredCurrentLetter = e.key;\n            newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n            let previousDeletedRow = returnedRowAndColumn[0][0].row;\n            let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n            this.setState({\n              removableBoardArray: newItems\n            });\n            this.setState({\n              currentLetter: e.key\n            });\n            this.setState({\n              currentWord: this.state.currentWord + e.key\n            });\n            this.setState({\n              indexesPushedIntoArray: this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)\n            });\n            this.setState(prevState => ({\n              lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {\n                previousDeletedRow,\n                previousDeletedColumn\n              }]\n            }));\n            const face = previouslyEnteredCurrentLetter;\n            const row = previousDeletedRow;\n            const col = previousDeletedColumn;\n            const requiredTileObjectFormat = {\n              face,\n              row,\n              col\n            };\n            const requiredTileObject = new TileData(requiredTileObjectFormat);\n            this.setState(prevState => ({\n              previousLetters: [...prevState.previousLetters, requiredTileObject]\n            }));\n            console.log(\"2\");\n          } else {\n            alert(\"You have already chosen maximum number of that letter in board\");\n          }\n        } else {\n          alert(\"The letter either doesn't exist in board \");\n        }\n      } else if (e.keyCode === 8) {\n        this.setState({\n          currentWord: this.state.currentWord.substring(0, this.state.currentWord.length - 1)\n        });\n        const originalBoard = this.state.removableBoardArray;\n        let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n        let lastLetter = this.state.previousLetters.pop();\n        originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n        this.setState({\n          removableBoardArray: originalBoard\n        });\n        this.state.indexesPushedIntoArray.pop();\n      } else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {\n        e.preventDefault();\n        alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      } else {\n        alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n      }\n    };\n\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = []; // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter: '',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray: [],\n      lastDeletedRowAndColumn: [],\n      previousLetters: []\n    };\n  } // Adds Current Word to the Word List\n\n\n  handleSubmit(word, indexesPushedIntoArray) {\n    this.setState({\n      removableBoardArray: JSON.parse(JSON.stringify(this.initGrid))\n    });\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data: {\n        wordEntered: word,\n        indexesArray: JSON.stringify(indexesPushedIntoArray)\n      },\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n    }).done(data => {\n      console.log(data);\n    }); // TODO: Check if Current Word is valid\n    // Check if word is valid\n\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid; // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: [],\n      removedLettersArray: [] // ,removableBoardArray:clearedRemovableBoardArray\n\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"word-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Current Word\"), React.createElement(\"div\", {\n      className: \"current-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.handleKeyPress,\n      value: this.state.currentWord,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }))), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord, this.state.indexesPushedIntoArray),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction testForLettersInBoard(e, boardState, _this) {\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n  let checkForLetterExist = false;\n\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      if (boardState[i][j] === \"\") {\n        if (_this.initGrid[i][j].letter === e.key) {\n          removedRowsAndColumns = removedRowsAndColumns.concat({\n            row: i,\n            column: j,\n            letterExists: checkForLetterExist\n          });\n        }\n      }\n\n      if (e.key === boardState[i][j].letter) {\n        boardState[i][j] = \"\";\n        removedRowsAndColumns = removedRowsAndColumns.concat({\n          row: i,\n          column: j,\n          letterExists: checkForLetterExist\n        });\n        checkForLetterExist = true;\n      }\n    }\n  }\n\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n  removedRowsAndColumns.push(checkForLetterExist);\n  return removedRowsAndColumnsArray;\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","jQuery","shuffledGrid","calculateScore","Board","ScoreBox","Button","TileData","Game","constructor","props","handleChange","e","handleKeyPress","keyCode","letterInstance","requiredFlag","returnedRowAndColumn","testForLettersInBoard","state","removableBoardArray","length","desiredFlag","forEach","element1","element2","newItems","previouslyEnteredCurrentLetter","key","row","column","previousDeletedRow","previousDeletedColumn","setState","currentLetter","currentWord","indexesPushedIntoArray","concat","prevState","lastDeletedRowAndColumn","face","col","requiredTileObjectFormat","requiredTileObject","previousLetters","console","log","alert","substring","originalBoard","rowAndColumn","pop","lastLetter","preventDefault","initGrid","JSON","parse","stringify","removedRowsAndColumnsArray","board","currentWordPosition","wordScoreList","handleSubmit","word","ajax","type","url","data","wordEntered","indexesArray","crossDomain","headers","done","score","clearedBoard","removedLettersArray","render","bind","Object","values","reduce","totalScore","next","boardState","_this","removedRowsAndColumns","checkForLetterExist","i","j","letter","letterExists","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jQuery from 'jquery'\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\n// import CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\nimport  TileData  from '../../data';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = [];\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter:'',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray:[],\n      lastDeletedRowAndColumn:[],\n      previousLetters:[]\n    };\n  }\n\n\n\n\n\n\n  // Adds Current Word to the Word List\n  handleSubmit(word,indexesPushedIntoArray) \n  {\n    this.setState({removableBoardArray:JSON.parse(JSON.stringify(this.initGrid))});\n    jQuery.ajax({\n      type: 'GET',\n      url: 'http://localhost:3001/check_word_validity/inputword',\n      data:{wordEntered:word, indexesArray:JSON.stringify(indexesPushedIntoArray)},\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Access-Control-Allow-Origin': '*'\n      }\n\n    }).done(data => {\n      console.log(data);\n    });\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: [],\n      removedLettersArray:[]\n      // ,removableBoardArray:clearedRemovableBoardArray\n    });\n  \n  }\n\n  handleChange = (e) =>\n  {\n    // this.setState({currentWord:e.target.value});\n  }\n\n  \n\n  handleKeyPress = (e) =>\n  {\n    if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122))\n    {\n      let letterInstance = false;\n      let requiredFlag = false;\n\n      let returnedRowAndColumn = testForLettersInBoard(e,this.state.removableBoardArray,this) ;\n      \n      if ( returnedRowAndColumn[0].length > 0 )\n        { \n            \n            const desiredFlag = returnedRowAndColumn.forEach\n            (function(element1) { \n            element1.forEach (function (element2)\n            {\n              if( element2 == letterInstance)\n            {\n              requiredFlag = true;\n            }\n          }\n            )});\n            \n            if (requiredFlag === true)\n            {\n            const newItems = this.state.removableBoardArray;\n            const previouslyEnteredCurrentLetter = e.key;\n            newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n            let previousDeletedRow = returnedRowAndColumn[0][0].row;\n            let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n            this.setState({removableBoardArray:newItems});\n            this.setState({currentLetter:e.key});\n            this.setState({currentWord:this.state.currentWord + e.key});\n            this.setState({indexesPushedIntoArray:this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)});\n            this.setState(prevState => ({\n              lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {previousDeletedRow,previousDeletedColumn}]\n            }));\n\n           \n            const face = previouslyEnteredCurrentLetter;\n            const row = previousDeletedRow;\n            const col = previousDeletedColumn;\n            const requiredTileObjectFormat = {face,row,col};\n            const requiredTileObject = new TileData(requiredTileObjectFormat);\n            this.setState(prevState => ({\n              previousLetters: [...prevState.previousLetters, requiredTileObject]\n            }));\n          console.log(\"2\");\n        }\n        else\n        {\n          alert(\"You have already chosen maximum number of that letter in board\");\n        }\n      }\n      else\n      {\n        alert(\"The letter either doesn't exist in board \");\n      }\n      }\n    else if (e.keyCode === 8)\n    {\n      \n      this.setState({currentWord:this.state.currentWord.substring(0, this.state.currentWord.length - 1)});\n      const originalBoard = this.state.removableBoardArray;\n      let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n      let lastLetter = this.state.previousLetters.pop();\n      originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n      this.setState({removableBoardArray:originalBoard});\n      this.state.indexesPushedIntoArray.pop();\n    }\n    else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40)\n    {\n      e.preventDefault();\n      alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      \n    }\n    else\n    {\n      alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            board={this.state.board}\n          />\n\n          {/* <CurrentWord currentWord={this.state.currentWord}  label=\"Current Word\"> */} \n          {/* {/* </CurrentWord> */}\n\n          <div className=\"word-area\">\n            <div className=\"current-header\">\n              Current Word\n            </div>\n           <div className=\"current-word\">\n           \n            <input type=\"text\" \n            onKeyDown = {this.handleKeyPress} value= {this.state.currentWord} onChange={this.handleChange}\n            ></input>\n            </div>\n          </div>\n\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord,this.state.indexesPushedIntoArray)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n\nfunction testForLettersInBoard(e,boardState,_this)\n{\n\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n  let checkForLetterExist = false;\n  for(let i=0;i<boardState.length;i++)\n  {\n   for(let j=0; j<boardState[i].length;j++)\n   {\n    if (boardState[i][j] === \"\")\n    {\n      if (_this.initGrid[i][j].letter === e.key)\n      {\n        removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j,letterExists:checkForLetterExist});\n      }\n    }\n\n     if(e.key === boardState[i][j].letter)\n     {\n      boardState[i][j] = \"\";\n      removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j,letterExists:checkForLetterExist});\n      checkForLetterExist = true;\n    }\n   } \n  }\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n  removedRowsAndColumns.push(checkForLetterExist);\n  return removedRowsAndColumnsArray;\n} "]},"metadata":{},"sourceType":"module"}