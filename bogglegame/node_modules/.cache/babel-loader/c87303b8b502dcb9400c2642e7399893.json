{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Timer\\\\index.js\";\nimport React, { Component } from 'react'; // import './Timer.scss'; //Have your own styling\n\nimport { Row, Col } from 'reactstrap';\nexport default class Timer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      remainingMinutes: 0,\n      remainingSeconds: 0\n    };\n  }\n\n  updateRemainMinutesAndSeconds(timeRemainingInSeconds) {\n    let remainingMinutes = Math.floor(timeRemainingInSeconds / 60);\n    let remainingSeconds = timeRemainingInSeconds % 60;\n    this.setState({\n      remainingMinutes,\n      remainingSeconds\n    });\n  }\n\n  countDown(timeRemainingInSeconds, shouldSkipCallback) {\n    this.setState({\n      timeRemainingInSeconds\n    });\n\n    if (!shouldSkipCallback && timeRemainingInSeconds % 60 === 0) {\n      this.props.onEveryMinute(1);\n    }\n\n    if (timeRemainingInSeconds === 0) {\n      this.props.onCompletion();\n    }\n\n    localStorage.setItem('timeRemainingInSeconds', timeRemainingInSeconds);\n\n    if (timeRemainingInSeconds > 0) {\n      this.updateRemainMinutesAndSeconds(timeRemainingInSeconds);\n      timeRemainingInSeconds = timeRemainingInSeconds - 1;\n      this.setTimeoutId = setTimeout(this.countDown.bind(this, timeRemainingInSeconds, false), 1000);\n    }\n  }\n\n  compareServerTimeAndComponentTimeAndUpdateServer(serverSideTimeRemainingInSeconds) {\n    let componentTimeRemainingInSeconds = localStorage.getItem('timeRemainingInSeconds');\n\n    if (componentTimeRemainingInSeconds && componentTimeRemainingInSeconds < serverSideTimeRemainingInSeconds) {\n      let differenceInMinutes = Math.floor((serverSideTimeRemainingInSeconds - componentTimeRemainingInSeconds) / 60);\n\n      if (differenceInMinutes > 0) {\n        this.props.onEveryMinute(differenceInMinutes);\n      }\n\n      return componentTimeRemainingInSeconds;\n    }\n\n    return serverSideTimeRemainingInSeconds;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.timeRemainingInSeconds !== nextProps.timeRemainingInSeconds) {\n      let timeRemainingInSeconds = this.compareServerTimeAndComponentTimeAndUpdateServer(nextProps.timeRemainingInSeconds);\n      this.countDown(timeRemainingInSeconds, true);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.setTimeoutId);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"font-weight-bold lead number-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.remainingMinutes > 9 ? this.state.remainingMinutes : '0' + this.state.remainingMinutes, \":\", this.state.remainingSeconds > 9 ? this.state.remainingSeconds : '0' + this.state.remainingSeconds))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"remaining\")))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Timer/index.js"],"names":["React","Component","Row","Col","Timer","constructor","props","state","remainingMinutes","remainingSeconds","updateRemainMinutesAndSeconds","timeRemainingInSeconds","Math","floor","setState","countDown","shouldSkipCallback","onEveryMinute","onCompletion","localStorage","setItem","setTimeoutId","setTimeout","bind","compareServerTimeAndComponentTimeAndUpdateServer","serverSideTimeRemainingInSeconds","componentTimeRemainingInSeconds","getItem","differenceInMinutes","componentWillReceiveProps","nextProps","componentWillUnmount","clearTimeout","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n// import './Timer.scss'; //Have your own styling\r\nimport { Row, Col } from 'reactstrap';\r\n\r\nexport default class Timer extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      remainingMinutes: 0,\r\n      remainingSeconds: 0\r\n    };\r\n  }\r\n\r\n  updateRemainMinutesAndSeconds(timeRemainingInSeconds){\r\n    let remainingMinutes = Math.floor(timeRemainingInSeconds/60);\r\n    let remainingSeconds = timeRemainingInSeconds % 60;\r\n    this.setState({\r\n      remainingMinutes,\r\n      remainingSeconds\r\n    });\r\n  }\r\n\r\n  countDown(timeRemainingInSeconds,shouldSkipCallback){\r\n    this.setState({\r\n      timeRemainingInSeconds\r\n    });\r\n    if (!shouldSkipCallback && timeRemainingInSeconds % 60 === 0) {\r\n      this.props.onEveryMinute(1);\r\n    }\r\n    if (timeRemainingInSeconds === 0){\r\n      this.props.onCompletion();\r\n    }\r\n    localStorage.setItem('timeRemainingInSeconds',timeRemainingInSeconds);\r\n    if(timeRemainingInSeconds > 0){\r\n      this.updateRemainMinutesAndSeconds(timeRemainingInSeconds);\r\n      timeRemainingInSeconds = timeRemainingInSeconds-1;\r\n      this.setTimeoutId = setTimeout(this.countDown.bind(this,timeRemainingInSeconds, false), 1000);\r\n    }\r\n  }\r\n\r\n  compareServerTimeAndComponentTimeAndUpdateServer(serverSideTimeRemainingInSeconds){\r\n    let componentTimeRemainingInSeconds = localStorage.getItem('timeRemainingInSeconds');\r\n    if(componentTimeRemainingInSeconds && componentTimeRemainingInSeconds < serverSideTimeRemainingInSeconds) {\r\n      let differenceInMinutes = Math.floor((serverSideTimeRemainingInSeconds - componentTimeRemainingInSeconds)/60)\r\n      if(differenceInMinutes>0){\r\n        this.props.onEveryMinute(differenceInMinutes)\r\n      }\r\n      return componentTimeRemainingInSeconds;\r\n    }\r\n    return serverSideTimeRemainingInSeconds;\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if(this.props.timeRemainingInSeconds !== nextProps.timeRemainingInSeconds){\r\n      let timeRemainingInSeconds = this.compareServerTimeAndComponentTimeAndUpdateServer(nextProps.timeRemainingInSeconds);\r\n      this.countDown(timeRemainingInSeconds,true);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearTimeout(this.setTimeoutId);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='timer'>\r\n          <div>\r\n          <Row>\r\n            <Col>\r\n          <div className='font-weight-bold lead number-display'>\r\n            {\r\n              this.state.remainingMinutes>9?\r\n              this.state.remainingMinutes:'0'+this.state.remainingMinutes\r\n            }:{\r\n              this.state.remainingSeconds>9?\r\n              this.state.remainingSeconds:'0'+this.state.remainingSeconds\r\n            }\r\n          </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <div className='info'>remaining</div>\r\n            </Col>\r\n          </Row>\r\n          </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}