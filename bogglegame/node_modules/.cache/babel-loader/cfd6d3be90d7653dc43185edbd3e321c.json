{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pratik\\\\ReactFrontEnd\\\\bogglegame\\\\src\\\\components\\\\Game\\\\index.js\";\nimport React, { Component } from 'react';\nimport jQuery from 'jquery';\nimport { shuffledGrid // copyBoard,\n// isTileEqual,\n// isAdjacent,\n, getCountOfNumberOfCharacters, calculateScore } from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox'; // import CurrentWord from '../CurrentWord';\n\nimport Button from '../Button';\nimport './Game.css';\nimport TileData from '../../data'; //Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props); // TODO: Init board with random tiles\n\n    this.handleChange = e => {// this.setState({currentWord:e.target.value});\n    };\n\n    this.handleKeyPress = e => {\n      if (e.keyCode >= 65 && e.keyCode <= 90 || e.keyCode >= 97 && e.keyCode <= 122) {\n        let returnedRowAndColumn = testForLettersInBoard(e, this.state.removableBoardArray, this);\n\n        if (returnedRowAndColumn[0].length > 0) {\n          if (this.frequenceOfCharacters[e.key] > 0) {\n            const newItems = this.state.removableBoardArray;\n            const previouslyEnteredCurrentLetter = e.key;\n            newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n            let previousDeletedRow = returnedRowAndColumn[0][0].row;\n            let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n            this.setState({\n              removableBoardArray: newItems\n            });\n            this.setState({\n              currentLetter: e.key\n            });\n            this.setState({\n              currentWord: this.state.currentWord + e.key\n            });\n            this.setState({\n              indexesPushedIntoArray: this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)\n            });\n            this.setState(prevState => ({\n              lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {\n                previousDeletedRow,\n                previousDeletedColumn\n              }]\n            }));\n            const face = previouslyEnteredCurrentLetter;\n            const row = previousDeletedRow;\n            const col = previousDeletedColumn;\n            const requiredTileObjectFormat = {\n              face,\n              row,\n              col\n            };\n            const requiredTileObject = new TileData(requiredTileObjectFormat);\n            this.setState(prevState => ({\n              previousLetters: [...prevState.previousLetters, requiredTileObject]\n            }));\n            console.log(\"2\");\n            this.frequenceOfCharacters[e.key] = this.frequenceOfCharacters[e.key] - 1;\n          } else {\n            alert(\"You have already chosen maximum number of that letter in board\");\n          }\n        } else {\n          alert(\"The letter either doesn't exist in board \");\n        }\n      } else if (e.keyCode === 8) {\n        this.setState({\n          currentWord: this.state.currentWord.substring(0, this.state.currentWord.length - 1)\n        });\n        const originalBoard = this.state.removableBoardArray;\n        let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n        let lastLetter = this.state.previousLetters.pop();\n        originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n        this.setState({\n          removableBoardArray: originalBoard\n        });\n        this.state.indexesPushedIntoArray.pop();\n        this.frequenceOfCharacters[lastLetter.letter] = this.frequenceOfCharacters[lastLetter.letter] + 1;\n      } else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40) {\n        e.preventDefault();\n        alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      } else {\n        alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n      }\n    };\n\n    this.initGrid = shuffledGrid();\n    this.frequenceOfCharacters = getCountOfNumberOfCharacters();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = []; // TODO: Init state with the board\n\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter: '',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray: [],\n      lastDeletedRowAndColumn: [],\n      previousLetters: [],\n      frequencyOfCharacters: this.frequenceOfCharacters\n    };\n  } // Adds Current Word to the Word List\n\n\n  handleSubmit(word, indexesPushedIntoArray) {\n    this.frequenceOfCharacters = getCountOfNumberOfCharacters();\n    this.setState({\n      removableBoardArray: JSON.parse(JSON.stringify(this.initGrid))\n    }); // let selectedWord = window.getSelection().toString();\n\n    fetchAPI(word).then(result => {\n      console.log(result);\n      result.json().then(function (data) {\n        console.log(data);\n      });\n    }); // jQuery.ajax({\n    //   type: 'GET',\n    //   url: 'http://localhost:3001/check_word_validity/inputword',\n    //   data:{wordEntered:word, indexesArray:JSON.stringify(indexesPushedIntoArray)},\n    //   crossDomain: true,\n    //   headers: {\n    //     'Content-Type': 'application/x-www-form-urlencoded',\n    //     'Access-Control-Allow-Origin': '*'\n    //   }\n    // }).done(data => {\n    //   console.log(data);\n    // });\n    // TODO: Check if Current Word is valid\n    // Check if word is valid\n\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    } // TODO: Calculate score\n\n\n    const score = calculateScore(word); // TODO: Unselect all tiles.\n\n    const clearedBoard = this.initGrid; // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    // TODO: Add to the Word List\n\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList,\n        [word]: score\n      },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: [],\n      removedLettersArray: [] // ,removableBoardArray:clearedRemovableBoardArray\n\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Board, {\n      board: this.state.board,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"word-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"current-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Current Word\"), React.createElement(\"div\", {\n      className: \"current-word\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onKeyDown: this.handleKeyPress,\n      value: this.state.currentWord,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }))), React.createElement(Button // TODO: Pass Button Props and Button Callback\n    , {\n      handleSubmit: this.handleSubmit.bind(this, this.state.currentWord, this.state.indexesPushedIntoArray),\n      label: \"SUBMIT WORD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    })), React.createElement(ScoreBox // TODO: Pass ScoreBox Props\n    , {\n      wordScoreList: this.state.wordScoreList,\n      totalScore: Object.values(this.state.wordScoreList).reduce((totalScore, next) => {\n        return totalScore + next;\n      }, 0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction fetchAPI(param) {\n  return fetch(\"http://localhost:3001/check_word_validity/inputword?wordEntered=\" + param);\n}\n\nfunction testForLettersInBoard(e, boardState, _this) {\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n  let frequencyFlag = false;\n\n  for (let i = 0; i < boardState.length; i++) {\n    for (let j = 0; j < boardState[i].length; j++) {\n      if (boardState[i][j] === \"\") {\n        if (_this.initGrid[i][j].letter === e.key) {\n          removedRowsAndColumns = removedRowsAndColumns.concat({\n            row: i,\n            column: j\n          });\n          frequencyFlag = true;\n        }\n      }\n\n      if (e.key === boardState[i][j].letter) {\n        boardState[i][j] = \"\";\n        removedRowsAndColumns = removedRowsAndColumns.concat({\n          row: i,\n          column: j\n        });\n        frequencyFlag = true;\n      }\n    }\n  } // if (frequencyFlag == true)\n  // {\n  //   _this.frequenceOfCharacters[e.key] = _this.frequenceOfCharacters[e.key] - 1;\n  // }\n\n\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n  return removedRowsAndColumnsArray;\n}","map":{"version":3,"sources":["C:/Users/Pratik/ReactFrontEnd/bogglegame/src/components/Game/index.js"],"names":["React","Component","jQuery","shuffledGrid","getCountOfNumberOfCharacters","calculateScore","Board","ScoreBox","Button","TileData","Game","constructor","props","handleChange","e","handleKeyPress","keyCode","returnedRowAndColumn","testForLettersInBoard","state","removableBoardArray","length","frequenceOfCharacters","key","newItems","previouslyEnteredCurrentLetter","row","column","previousDeletedRow","previousDeletedColumn","setState","currentLetter","currentWord","indexesPushedIntoArray","concat","prevState","lastDeletedRowAndColumn","face","col","requiredTileObjectFormat","requiredTileObject","previousLetters","console","log","alert","substring","originalBoard","rowAndColumn","pop","lastLetter","letter","preventDefault","initGrid","JSON","parse","stringify","removedRowsAndColumnsArray","board","currentWordPosition","wordScoreList","frequencyOfCharacters","handleSubmit","word","fetchAPI","then","result","json","data","score","clearedBoard","removedLettersArray","render","bind","Object","values","reduce","totalScore","next","param","fetch","boardState","_this","removedRowsAndColumns","frequencyFlag","i","j","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport jQuery from 'jquery'\nimport {\n  shuffledGrid,\n  // copyBoard,\n  // isTileEqual,\n  // isAdjacent,\n  getCountOfNumberOfCharacters,\n  calculateScore\n} from '../../util/gameUtil';\nimport Board from '../Board';\nimport ScoreBox from '../ScoreBox';\n// import CurrentWord from '../CurrentWord';\nimport Button from '../Button';\nimport './Game.css';\nimport  TileData  from '../../data';\n\n//Again like in App.js since {component} was imported then in the below line it is written as extends Component\n//otherwise it should be written as extends React.Component\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    // TODO: Init board with random tiles\n    this.initGrid = shuffledGrid();\n    this.frequenceOfCharacters = getCountOfNumberOfCharacters();\n    this.removableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n    this.removedRowsAndColumnsArray = [];\n    // TODO: Init state with the board\n    this.state = {\n      board: this.initGrid,\n      currentWord: '',\n      currentWordPosition: [],\n      wordScoreList: {},\n      currentLetter:'',\n      removableBoardArray: this.removableBoardArray,\n      indexesPushedIntoArray:[],\n      lastDeletedRowAndColumn:[],\n      previousLetters:[],\n      frequencyOfCharacters:this.frequenceOfCharacters\n    };\n  }\n\n  \n\n\n\n  \n\n  // Adds Current Word to the Word List\n  handleSubmit(word,indexesPushedIntoArray) \n  {\n    this.frequenceOfCharacters = getCountOfNumberOfCharacters();\n    this.setState({removableBoardArray:JSON.parse(JSON.stringify(this.initGrid))});\n    // let selectedWord = window.getSelection().toString();\n    fetchAPI(word).then(result => {\n      console.log(result);\n      result.json().then(function(data) {\n        console.log(data);\n      });\n    });\n    // jQuery.ajax({\n    //   type: 'GET',\n    //   url: 'http://localhost:3001/check_word_validity/inputword',\n    //   data:{wordEntered:word, indexesArray:JSON.stringify(indexesPushedIntoArray)},\n    //   crossDomain: true,\n    //   headers: {\n    //     'Content-Type': 'application/x-www-form-urlencoded',\n    //     'Access-Control-Allow-Origin': '*'\n    //   }\n\n    // }).done(data => {\n    //   console.log(data);\n    // });\n    // TODO: Check if Current Word is valid\n\n    // Check if word is valid\n    if (word.length < 3 || this.state.wordScoreList[word]) {\n      return;\n    }\n    // TODO: Calculate score\n    const score = calculateScore(word);\n\n    // TODO: Unselect all tiles.\n    const clearedBoard = this.initGrid;\n\n    // const clearedRemovableBoardArray = JSON.parse(JSON.stringify(this.initGrid));\n\n    // TODO: Add to the Word List\n    this.setState({\n      // wordScoreList: Object.assign(this.state.wordScoreList, {[word]: score}),\n      wordScoreList: { ...this.state.wordScoreList, [word]: score },\n      currentWord: '',\n      currentWordPosition: [],\n      board: clearedBoard,\n      indexesPushedIntoArray: [],\n      removedLettersArray:[]\n      // ,removableBoardArray:clearedRemovableBoardArray\n    });\n  \n  }\n\n  handleChange = (e) =>\n  {\n    // this.setState({currentWord:e.target.value});\n  }\n\n  \n\n  handleKeyPress = (e) =>\n  {\n    if ((e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122))\n    {\n      \n\n      let returnedRowAndColumn = testForLettersInBoard(e,this.state.removableBoardArray,this) ;\n      \n      if ( returnedRowAndColumn[0].length > 0 )\n        {\n         \n            if (this.frequenceOfCharacters[e.key] > 0)\n            {\n            const newItems = this.state.removableBoardArray;\n            const previouslyEnteredCurrentLetter = e.key;\n            newItems[returnedRowAndColumn[0][0].row][returnedRowAndColumn[0][0].column] = \"\";\n            let previousDeletedRow = returnedRowAndColumn[0][0].row;\n            let previousDeletedColumn = returnedRowAndColumn[0][0].column;\n            this.setState({removableBoardArray:newItems});\n            this.setState({currentLetter:e.key});\n            this.setState({currentWord:this.state.currentWord + e.key});\n            this.setState({indexesPushedIntoArray:this.state.indexesPushedIntoArray.concat(returnedRowAndColumn)});\n            this.setState(prevState => ({\n              lastDeletedRowAndColumn: [...prevState.lastDeletedRowAndColumn, {previousDeletedRow,previousDeletedColumn}]\n            }));\n\n           \n            const face = previouslyEnteredCurrentLetter;\n            const row = previousDeletedRow;\n            const col = previousDeletedColumn;\n            const requiredTileObjectFormat = {face,row,col};\n            const requiredTileObject = new TileData(requiredTileObjectFormat);\n            this.setState(prevState => ({\n              previousLetters: [...prevState.previousLetters, requiredTileObject]\n            }));\n          console.log(\"2\");\n          this.frequenceOfCharacters[e.key] = this.frequenceOfCharacters[e.key] - 1;\n        }\n        else\n        {\n          alert(\"You have already chosen maximum number of that letter in board\");\n        }\n      }\n      else\n      {\n        alert(\"The letter either doesn't exist in board \");\n      }\n      }\n    else if (e.keyCode === 8)\n    {\n      \n      this.setState({currentWord:this.state.currentWord.substring(0, this.state.currentWord.length - 1)});\n      const originalBoard = this.state.removableBoardArray;\n      let rowAndColumn = this.state.lastDeletedRowAndColumn.pop();\n      let lastLetter = this.state.previousLetters.pop();\n      originalBoard[rowAndColumn.previousDeletedRow][rowAndColumn.previousDeletedColumn] = lastLetter;\n      this.setState({removableBoardArray:originalBoard});\n      this.state.indexesPushedIntoArray.pop();\n      this.frequenceOfCharacters[lastLetter.letter] = this.frequenceOfCharacters[lastLetter.letter] + 1\n    }\n    else if (e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40)\n    {\n      e.preventDefault();\n      alert(\"No arrow keys are allowed. Only alphabetic characters and backspace is allowed for deletion.\");\n      \n    }\n    else\n    {\n      alert(\"only alphabetic characters and backspace is allowed for deletion.\");\n    }\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <div className=\"game-area\">\n          <Board\n            board={this.state.board}\n          />\n\n          {/* <CurrentWord currentWord={this.state.currentWord}  label=\"Current Word\"> */} \n          {/* {/* </CurrentWord> */}\n\n          <div className=\"word-area\">\n            <div className=\"current-header\">\n              Current Word\n            </div>\n           <div className=\"current-word\">\n           \n            <input type=\"text\" \n            onKeyDown = {this.handleKeyPress} value= {this.state.currentWord} onChange={this.handleChange}\n            ></input>\n            </div>\n          </div>\n\n          <Button\n            // TODO: Pass Button Props and Button Callback\n            handleSubmit={this.handleSubmit.bind(this, this.state.currentWord,this.state.indexesPushedIntoArray)}\n            label=\"SUBMIT WORD\"\n          />\n        </div>\n\n        <ScoreBox\n          // TODO: Pass ScoreBox Props\n          wordScoreList={this.state.wordScoreList}\n          totalScore={Object.values(\n            this.state.wordScoreList\n          ).reduce((totalScore, next) => {\n            return totalScore + next;\n          }, 0)}\n        />\n        {/* Makes Board and ScoreBox be side by side */}\n        <div className=\"clear\" />\n\n      </div>\n    );\n  }\n}\n\nfunction fetchAPI(param) {\n  return fetch(\"http://localhost:3001/check_word_validity/inputword?wordEntered=\" + param);\n}\n\nfunction testForLettersInBoard(e,boardState,_this)\n{\n\n  let removedRowsAndColumns = [];\n  let removedRowsAndColumnsArray = [];\n  let frequencyFlag = false;\n\n  for(let i=0;i<boardState.length;i++)\n  {\n   for(let j=0; j<boardState[i].length;j++)\n   {\n    if (boardState[i][j] === \"\")\n    {\n      if (_this.initGrid[i][j].letter === e.key)\n      {\n        removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j});\n        frequencyFlag = true;\n      }\n    }\n\n     if(e.key === boardState[i][j].letter)\n     {\n      boardState[i][j] = \"\";\n      removedRowsAndColumns = removedRowsAndColumns.concat({row:i,column:j});\n      frequencyFlag = true;\n      \n    }\n  } \n  }\n    // if (frequencyFlag == true)\n    // {\n    //   _this.frequenceOfCharacters[e.key] = _this.frequenceOfCharacters[e.key] - 1;\n    // }\n  removedRowsAndColumnsArray.push(removedRowsAndColumns);\n \n  return removedRowsAndColumnsArray;\n} "]},"metadata":{},"sourceType":"module"}